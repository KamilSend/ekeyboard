{"version":3,"sources":["assets/sound/C.wav","assets/sound/D.wav","assets/sound/E.wav","assets/sound/F.wav","assets/sound/G.wav","assets/sound/A.wav","assets/sound/H.wav","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Csound","UIfx","C","volume","throttleMs","Dsound","D","Esound","E","Fsound","F","Gsound","G","Asound","A","Hsound","H","App","handleKeyPress","event","key","play","console","log","className","onKeyPress","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,yECA3CD,EAAOC,QAAU,IAA0B,kC,iRCarCC,EAAS,IAAIC,IACfC,IAAM,CACFC,OAAQ,GACRC,WAAY,MAEdC,EAAS,IAAIJ,IACfK,IAAM,CACFH,OAAQ,GACRC,WAAY,MAEdG,EAAS,IAAIN,IACfO,IAAM,CACFL,OAAQ,GACRC,WAAY,MAEdK,EAAS,IAAIR,IACfS,IAAM,CACFP,OAAQ,GACRC,WAAY,MAEdO,EAAS,IAAIV,IACfW,IAAM,CACFT,OAAQ,GACRC,WAAY,MAEdS,EAAS,IAAIZ,IACfa,IAAM,CACFX,OAAQ,GACRC,WAAY,MAEdW,EAAS,IAAId,IACfe,IAAM,CACFb,OAAQ,GACRC,WAAY,MAoELa,E,4MA5DXC,eAAiB,SAACC,GACG,MAAdA,EAAMC,KACLpB,EAAOqB,OACPC,QAAQC,IAAI,MACO,MAAdJ,EAAMC,KACXf,EAAOgB,OACPC,QAAQC,IAAI,MAEM,MAAdJ,EAAMC,KACVb,EAAOc,OACPC,QAAQC,IAAI,MAEM,MAAdJ,EAAMC,KACVX,EAAOY,OACPC,QAAQC,IAAI,MAEM,MAAdJ,EAAMC,KACVT,EAAOU,OACPC,QAAQC,IAAI,MAEM,MAAdJ,EAAMC,KACVP,EAAOQ,OACPC,QAAQC,IAAI,MAEM,MAAdJ,EAAMC,MACVL,EAAOM,OACPC,QAAQC,IAAI,O,uDAKhB,OACI,yBAAKC,UAAU,MAAMC,WAAYC,KAAKR,gBAClC,mDAA8B,6BAC9B,0EAA2C,6BAC3C,mDAA8B,6BAC9B,uEAAwC,6BACxC,mDAA8B,6BAC9B,gFAAmD,6BACnD,mDAA8B,6BAAK,6BAAK,6BAAK,6BAG7C,+CAA0B,6BAC1B,0DAAqC,6BACrC,2CAAsB,6BACtB,6CAAwB,6BACxB,+CAA0B,6BAC1B,kEAA6C,6BAC7C,2CAAsB,6BACtB,6CAAwB,6BAIxB,sD,GAxDES,IAAMC,WCvCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.24af8032.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/C.c797eb2d.wav\";","module.exports = __webpack_public_path__ + \"static/media/D.6399b140.wav\";","module.exports = __webpack_public_path__ + \"static/media/E.e56fe5ff.wav\";","module.exports = __webpack_public_path__ + \"static/media/F.3b69d127.wav\";","module.exports = __webpack_public_path__ + \"static/media/G.0cefe7d4.wav\";","module.exports = __webpack_public_path__ + \"static/media/A.e56a32f9.wav\";","module.exports = __webpack_public_path__ + \"static/media/H.ed6e3a4a.wav\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport UIfx from 'uifx'\nimport C from './assets/sound/C.wav'\nimport D from './assets/sound/D.wav'\nimport E from './assets/sound/E.wav'\nimport F from './assets/sound/F.wav'\nimport G from './assets/sound/G.wav'\nimport A from './assets/sound/A.wav'\nimport H from './assets/sound/H.wav'\n\nconst Csound = new UIfx(\n    C,    {\n        volume: 0.9, // number between 0.0 ~ 1.0\n        throttleMs: 100})\n\nconst Dsound = new UIfx(\n    D,    {\n        volume: 0.9, // number between 0.0 ~ 1.0\n        throttleMs: 100})\n\nconst Esound = new UIfx(\n    E,    {\n        volume: 0.9, // number between 0.0 ~ 1.0\n        throttleMs: 100})\n\nconst Fsound = new UIfx(\n    F,    {\n        volume: 0.9, // number between 0.0 ~ 1.0\n        throttleMs: 100})\n\nconst Gsound = new UIfx(\n    G,    {\n        volume: 0.9, // number between 0.0 ~ 1.0\n        throttleMs: 100})\n\nconst Asound = new UIfx(\n    A,    {\n        volume: 0.9, // number between 0.0 ~ 1.0\n        throttleMs: 100})\n\nconst Hsound = new UIfx(\n    H,    {\n        volume: 0.9, // number between 0.0 ~ 1.0\n        throttleMs: 100})\n\n\n\n\nclass App extends React.Component{\n\n\n    handleKeyPress = (event) => {\n        if(event.key === 'c'){\n            Csound.play()\n            console.log('C')\n        }else if(event.key === 'd'){\n            Dsound.play()\n            console.log('D')\n        }\n        else if(event.key === 'e'){\n            Esound.play()\n            console.log('E')\n        }\n        else if(event.key === 'f'){\n            Fsound.play()\n            console.log('F')\n        }\n        else if(event.key === 'g'){\n            Gsound.play()\n            console.log('G')\n        }\n        else if(event.key === 'a'){\n            Asound.play()\n            console.log('A')\n        }\n        else if(event.key === 'h'){\n            Hsound.play()\n            console.log('H')\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"App\" onKeyPress={this.handleKeyPress}>\n                <span>G E E F D D C E G</span><br/>\n                <span>Wlazł kotek na płotek i mruga,</span><br/>\n                <span>G E E F D D C E C</span><br/>\n                <span>ładna to piosenka niedługa.</span><br/>\n                <span>C E E F D D C E G</span><br/>\n                <span>Nie długa, nie krótka, lecz w sam raz.</span><br/>\n                <span>G E E F D D C E G</span><br/><br/><br/><br/>\n\n\n                <span>F F F C D D C</span><br/>\n                <span>Old MacDonald had a farm</span><br/>\n                <span>A A G G F</span><br/>\n                <span>Ee i ee i o</span><br/>\n                <span>F F F C D D C</span><br/>\n                <span>And on his farm he had some cows</span><br/>\n                <span>A A G G F</span><br/>\n                <span>Ee i ee i o</span><br/>\n\n\n\n                <button>Start Playing</button>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}