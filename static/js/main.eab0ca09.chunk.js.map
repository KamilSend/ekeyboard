{"version":3,"sources":["assets/sound/C.wav","assets/sound/D.wav","assets/sound/E.wav","assets/sound/F.wav","assets/sound/G.wav","assets/sound/A.wav","assets/sound/H.wav","components/PianoKey.js","components/PianoKeys.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PianoKey","this","props","descriptions","pressed","className","value","React","Component","PianoKeys","buttonPressed","map","description","config","volume","throttleMs","sounds","id","sound","UIfx","c","d","e","f","g","a","h","App","state","handleKeyPress","event","forEach","beep","key","play","buttonPressed2","push","active","slice","setState","handleKeyUp","onKeyPress","onKeyUp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eab0ca09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/C.c797eb2d.wav\";","module.exports = __webpack_public_path__ + \"static/media/D.6399b140.wav\";","module.exports = __webpack_public_path__ + \"static/media/E.e56fe5ff.wav\";","module.exports = __webpack_public_path__ + \"static/media/F.3b69d127.wav\";","module.exports = __webpack_public_path__ + \"static/media/G.0cefe7d4.wav\";","module.exports = __webpack_public_path__ + \"static/media/A.e56a32f9.wav\";","module.exports = __webpack_public_path__ + \"static/media/H.ed6e3a4a.wav\";","// import React from 'react'\n// import './PianoKey.scss'\n//\n//\n//\n//\n// const PianoKey = (props) => {\n//     // console.log(props.descriptions.pressed)\n//\n//     return(\n//\n//         props.descriptions.pressed?<button className=\"pianoKey pressed\">{props.descriptions.value}</button>:<button className=\"pianoKey\">{props.descriptions.value}</button>\n//             // <button className=\"pianoKey\">{props.buttonPressed[0].value}</button>\n//     )\n// }\n//\n// export default PianoKey\n\n\nimport React from 'react'\nimport './PianoKey.scss'\n\nclass PianoKey extends React.Component{\n\n    render(){\n        return(\n            this.props.descriptions.pressed?<button className=\"pianoKey pressed\">{this.props.descriptions.value}</button>:(\n                <button className=\"pianoKey\">{this.props.descriptions.value}</button>)\n        )\n    }\n}\nexport default PianoKey\n","import React from 'react'\nimport PianoKey from \"./PianoKey\";\n\n\nconst PianoKeys = (props) => {\n\n    return(\n        props.buttonPressed.map(description =>(\n        <PianoKey descriptions={description}/>\n    ))\n\n    )\n}\n\nexport default PianoKeys","import React from 'react';\nimport './App.css';\nimport PianoKeys from './components/PianoKeys'\n\nimport UIfx from 'uifx'\nimport c from './assets/sound/C.wav'\nimport d from './assets/sound/D.wav'\nimport e from './assets/sound/E.wav'\nimport f from './assets/sound/F.wav'\nimport g from './assets/sound/G.wav'\nimport a from './assets/sound/A.wav'\nimport h from './assets/sound/H.wav'\n\nconst config = {\n    volume: 1, // number between 0.0 ~ 1.0\n    throttleMs: 100}\n\nconst sounds = [\n    {id:\"c\", sound:new UIfx(c, config)},\n    {id:\"d\", sound:new UIfx(d, config)},\n    {id:\"e\", sound:new UIfx(e, config)},\n    {id:\"f\", sound:new UIfx(f, config)},\n    {id:\"g\", sound:new UIfx(g, config)},\n    {id:\"a\", sound:new UIfx(a, config)},\n    {id:\"h\", sound:new UIfx(h, config)},\n]\n\nclass App extends React.Component{\n\n    state = {\n        buttonPressed:[\n            {id:\"0\", value:\"c\", pressed:false},\n            {id:\"1\", value:\"d\", pressed:false},\n            {id:\"2\", value:\"e\", pressed:false},\n            {id:\"3\", value:\"f\", pressed:false},\n            {id:\"4\", value:\"g\", pressed:false},\n            {id:\"5\", value:\"a\", pressed:false},\n            {id:\"6\", value:\"h\", pressed:false},\n        ]\n    }\n\n    handleKeyPress = (event) => {\n\n        sounds.forEach(beep => {\n            if (event.key === beep.id) {\n                beep.sound.play()\n            }\n        }) //ma się odtworzyć dźwięk, absolutnie niezbędne\n\n        const buttonPressed = [...this.state.buttonPressed]\n        const buttonPressed2 =[]//kopia stanu i pusta tablica do której będą pushowane wyfolsowane elementy\n\n        buttonPressed.forEach(beep => {\n            beep = {id:beep.id, value:beep.value, pressed:false}\n            buttonPressed2.push(beep)\n\n            if (event.key === beep.value) {\n                let active = buttonPressed2.slice(beep.id,beep.id*1 + 1)\n                active = {id:beep.id, value:beep.value, pressed:true}\n                buttonPressed2[beep.id] = active\n                this.setState({\n                    buttonPressed:buttonPressed2\n                })\n            }\n        })\n    }\n\n    handleKeyUp = () => {\n\n            this.setState({\n                buttonPressed:[\n                    {id:\"0\", value:\"c\", pressed:false},\n                    {id:\"1\", value:\"d\", pressed:false},\n                    {id:\"2\", value:\"e\", pressed:false},\n                    {id:\"3\", value:\"f\", pressed:false},\n                    {id:\"4\", value:\"g\", pressed:false},\n                    {id:\"5\", value:\"a\", pressed:false},\n                    {id:\"6\", value:\"h\", pressed:false},\n                ]\n            })\n    }\n\n\n    render(){\n        //console.log(this.state.buttonPressed)\n        return (\n            <div className=\"App\" onKeyPress={this.handleKeyPress} onKeyUp={this.handleKeyUp}>\n                <span>G E E F D D C E G</span><br/>\n                <span>Wlazł kotek na płotek i mruga,</span><br/>\n                <span>G E E F D D C E C</span><br/>\n                <span>ładna to piosenka niedługa.</span><br/>\n                <span>C E E F D D C E G</span><br/>\n                <span>Nie długa, nie krótka, lecz w sam raz.</span><br/>\n                <span>G E E F D D C E G</span><br/><br/><br/><br/>\n\n\n                <span>F F F C D D C</span><br/>\n                <span>Old MacDonald had a farm</span><br/>\n                <span>A A G G F</span><br/>\n                <span>Ee i ee i o</span><br/>\n                <span>F F F C D D C</span><br/>\n                <span>And on his farm he had some cows</span><br/>\n                <span>A A G G F</span><br/>\n                <span>Ee i ee i o</span><br/>\n\n                <PianoKeys buttonPressed={this.state.buttonPressed}/>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}